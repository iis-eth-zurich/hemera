# run openocd riscv compliance tests
debug_level 2
adapter_khz     10000

interface remote_bitbang
remote_bitbang_host localhost

if {[info exists ::env(JTAG_VPI_PORT)]} {
   puts "Waiting on port $::env(JTAG_VPI_PORT)"
   remote_bitbang_port $::env(JTAG_VPI_PORT)
} else {
   puts "Waiting on port 9999"
   remote_bitbang_port 9999
}

set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x249511C3

foreach t [jtag names] {
    puts [format "TAP: %s\n" $t]
}

set _TARGETNAME_0 $_CHIPNAME.cpu0
set _TARGETNAME_1 $_CHIPNAME.cpu1
set _TARGETNAME_2 $_CHIPNAME.cpu2
set _TARGETNAME_3 $_CHIPNAME.cpu3
set _TARGETNAME_4 $_CHIPNAME.cpu4
set _TARGETNAME_5 $_CHIPNAME.cpu5
set _TARGETNAME_6 $_CHIPNAME.cpu6
set _TARGETNAME_7 $_CHIPNAME.cpu7

target create $_TARGETNAME_0 riscv -chain-position $_CHIPNAME.cpu -rtos hwthread
target create $_TARGETNAME_1 riscv -chain-position $_CHIPNAME.cpu -coreid 1
target create $_TARGETNAME_2 riscv -chain-position $_CHIPNAME.cpu -coreid 2
target create $_TARGETNAME_3 riscv -chain-position $_CHIPNAME.cpu -coreid 3
target create $_TARGETNAME_4 riscv -chain-position $_CHIPNAME.cpu -coreid 4
target create $_TARGETNAME_5 riscv -chain-position $_CHIPNAME.cpu -coreid 5
target create $_TARGETNAME_6 riscv -chain-position $_CHIPNAME.cpu -coreid 6
target create $_TARGETNAME_7 riscv -chain-position $_CHIPNAME.cpu -coreid 7

target smp $_TARGETNAME_0 $_TARGETNAME_1 $_TARGETNAME_2 $_TARGETNAME_3 $_TARGETNAME_4 $_TARGETNAME_5 $_TARGETNAME_6 $_TARGETNAME_7

riscv set_reset_timeout_sec 2000
riscv set_command_timeout_sec 2000

# prefer to use sba for system bus access
riscv set_prefer_sba on

# dump jtag chain
scan_chain

echo "initalizing ..."
init

echo "halting..."
halt

echo "finished"
shutdown
